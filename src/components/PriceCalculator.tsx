
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Calculator, FileText } from "lucide-react";

interface PriceCalculatorProps {
  files: File[];
  onPriceCalculated: (price: number) => void;
}

interface PriceOption {
  size: string;
  basePrice: number;
  description: string;
}

const PriceCalculator = ({ files, onPriceCalculated }: PriceCalculatorProps) => {
  const [selectedSize, setSelectedSize] = useState("");
  const [quantity, setQuantity] = useState(1);
  const [totalPrice, setTotalPrice] = useState(0);
  const [isCalculating, setIsCalculating] = useState(false);

  // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const priceOptions: PriceOption[] = [
    { size: "A6", basePrice: 150, description: "10.5 x 14.8 —Å–º" },
    { size: "A5", basePrice: 280, description: "14.8 x 21 —Å–º" },
    { size: "A4", basePrice: 450, description: "21 x 29.7 —Å–º" },
    { size: "A3", basePrice: 750, description: "29.7 x 42 —Å–º" },
    { size: "custom", basePrice: 300, description: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä" },
  ];

  const calculatePrice = () => {
    if (!selectedSize || quantity < 1) return;
    
    setIsCalculating(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    setTimeout(() => {
      const selectedOption = priceOptions.find(option => option.size === selectedSize);
      if (!selectedOption) return;
      
      let basePrice = selectedOption.basePrice;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
      const fileMultiplier = Math.min(files.length * 0.1 + 1, 2);
      
      // –°–∫–∏–¥–∫–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      let quantityDiscount = 1;
      if (quantity >= 10) quantityDiscount = 0.85;
      else if (quantity >= 5) quantityDiscount = 0.9;
      else if (quantity >= 3) quantityDiscount = 0.95;
      
      const finalPrice = Math.round(basePrice * fileMultiplier * quantity * quantityDiscount);
      setTotalPrice(finalPrice);
      setIsCalculating(false);
    }, 1500);
  };

  useEffect(() => {
    if (selectedSize && quantity >= 1) {
      calculatePrice();
    }
  }, [selectedSize, quantity, files]);

  const handleContinue = () => {
    onPriceCalculated(totalPrice);
  };

  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="text-2xl text-center flex items-center justify-center gap-2">
          <Calculator className="w-6 h-6" />
          –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        </CardTitle>
        <CardDescription className="text-center">
          –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="font-medium text-gray-700 mb-2 flex items-center gap-2">
            <FileText className="w-4 h-4" />
            –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          </h4>
          <p className="text-sm text-gray-600">
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: <span className="font-medium">{files.length}</span>
          </p>
          <div className="mt-2">
            {files.slice(0, 3).map((file, index) => (
              <p key={index} className="text-xs text-gray-500">
                ‚Ä¢ {file.name}
              </p>
            ))}
            {files.length > 3 && (
              <p className="text-xs text-gray-500">
                ... –∏ –µ—â–µ {files.length - 3} —Ñ–∞–π–ª–æ–≤
              </p>
            )}
          </div>
        </div>

        {/* –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ */}
        <div className="space-y-2">
          <Label htmlFor="size">–†–∞–∑–º–µ—Ä –ø–µ—á–∞—Ç–∏</Label>
          <Select value={selectedSize} onValueChange={setSelectedSize}>
            <SelectTrigger>
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä" />
            </SelectTrigger>
            <SelectContent>
              {priceOptions.map((option) => (
                <SelectItem key={option.size} value={option.size}>
                  <div className="flex flex-col">
                    <span className="font-medium">{option.size.toUpperCase()}</span>
                    <span className="text-xs text-gray-500">{option.description}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
        <div className="space-y-2">
          <Label htmlFor="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤</Label>
          <Input
            id="quantity"
            type="number"
            min="1"
            max="1000"
            value={quantity}
            onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
          />
          {quantity >= 3 && (
            <p className="text-sm text-green-600">
              üéâ –°–∫–∏–¥–∫–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity >= 10 ? '15%' : quantity >= 5 ? '10%' : '5%'}
            </p>
          )}
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ */}
        {selectedSize && (
          <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-6 rounded-lg border">
            <div className="flex justify-between items-center">
              <div>
                <p className="text-sm text-gray-600">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</p>
                <p className="text-3xl font-bold text-purple-600">
                  {isCalculating ? (
                    <span className="animate-pulse">–†–∞—Å—á–µ—Ç...</span>
                  ) : (
                    `${totalPrice.toLocaleString()} ‚ÇΩ`
                  )}
                </p>
              </div>
              <div className="text-right text-sm text-gray-500">
                <p>–ó–∞ {quantity} —ç–∫–∑.</p>
                <p>–†–∞–∑–º–µ—Ä: {selectedSize.toUpperCase()}</p>
              </div>
            </div>
            
            {totalPrice > 0 && (
              <div className="mt-4 pt-4 border-t border-purple-200">
                <p className="text-xs text-gray-600 mb-3">
                  * –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
                </p>
                <Button 
                  onClick={handleContinue}
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                  size="lg"
                  disabled={isCalculating}
                >
                  –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                </Button>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default PriceCalculator;
